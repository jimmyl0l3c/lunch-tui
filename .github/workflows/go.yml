# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "master" ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ "master" ]

jobs:

  build:
    strategy:
      matrix:
        platform: [windows, linux]
        include:
          - platform: windows
            os: windows-latest
            binary: main.exe
          - platform: linux
            os: ubuntu-latest
            binary: main

    runs-on: ${{ matrix.os }}
    outputs:
      digest_windows: ${{ steps.digest-output.outputs.digest_windows }}
      digest_linux: ${{ steps.digest-output.outputs.digest_linux }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

    - name: Output digest
      shell: bash
      id: digest-output
      run: |
          platform="${{ matrix.platform }}"
          digest=$(shasum -a 256 ${{ matrix.binary }})
          echo "digest_${platform}=${digest}" >> "$GITHUB_OUTPUT"
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      id: artifact-upload-step
      with:
        name: main-${{ matrix.platform }}
        path: ${{ matrix.binary }}

  create-new-release:
      if: startsWith(github.ref, 'refs/tags/')
      environment: release
      needs: [build]
      runs-on: ubuntu-latest
      name: Create new release
      steps:
        - name: Download artifact
          uses: actions/download-artifact@v4
          with:
            path: out
            pattern: main-*
            merge-multiple: true

        - name: Add digests
          run: |
            echo "${{ needs.build.outputs.digest_windows }}" > out/main.exe.sha256
            echo "${{ needs.build.outputs.digest_linux }}" > out/main.sha256
  
        - name: Release
          uses: softprops/action-gh-release@v2
          with:
            draft: false
            token: ${{ secrets.GH_TOKEN }}
            generate_release_notes: true
            files: out/*
            fail_on_unmatched_files: true
